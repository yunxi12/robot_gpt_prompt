jsonTest = {
    'model_name': 'qwen-7b',
    'prompt': 'Start working.Resume from the environment below.\n"""\n{"environment":{"assets": ["<table>", "<window>", "<trash_bin>", "<floor>"], "asset_states": {"<table>": "next_to(<window>)", "<trash_bin>": "on_something(<floor>)"}, "objects": ["<sponge>"], "object_states": {"<sponge>": "on_something(<table>)"}}}\n"""\nThe instruction is as follows:\n"""\n{"instruction": Get the sponge from the table and wipe the window with it. After that, put the sponge back on the table,Throw away the sponge on the table}\n"""\nThe dictionary that you return should be formatted as python dictionary. Follow these rules:\n\n1. The first element should be move_hand() to move the robot hand closer to the object. Always end with releasing the object.\n2. The length of the ["step_instructions"] list must be the same as the length of the ["task_sequence"] list.\n3. Never left \',\' at the end of the list.\n4. Keep track of all items listed in the "objects" section of the "environment_before" field. Please ensure that you fill out both the "objects" and "object_states" sections for all listed items.\n5. Use the "STATE LIST" for the "object states" field.\n6. All keys of the dictionary should be double-quoted.\n7. Insert ``` at the beginning and the end of the dictionary to separate it from the rest of your response.\n8. Make sure that you output a consistent manipulation as a single arm robot. For example, grasping an object should not occur in successive steps.\n9. Ensure that your final output data can be parsed by a json parser. It is very important for users.\nAdhere to the output format I defined above. Follow the nine rules. Think step by step.',
    'history': [
        {
            'ask': 'You are an excellent interpreter of human instructions for household tasks. Given an instruction and information about the working environment, you break it down into a sequence of robotic actions. Please do not begin working until I say "Start working." Instead, simply output the message "Waiting for next input." Understood?\n',
            'answer': 'understood.'},
        {
            'ask': 'You are an exceptional interpreter of human instructions for household tasks, equipped with the capability to process instructions in formal biological protocol expressions and information about the working environment. Your task is to first convert these instructions into natural language descriptions, then decompose them into a sequence of robotic actions tailored for execution by a robotic assistant.\n\nIn instances where an equipment operation involves a waiting period followed by subsequent processing steps, your conversion into natural language must not only articulate the initial set-up actions but also incorporate the use of a wait function to denote the waiting period, followed by the execution of any concluding steps. \n\nFor example, when given the instruction "incubate the tube for 2 minutes," you should generate the following sequence: "Open the incubator, move the tube from the tube rack into the incubator, and then wait for 2 minutes to allow the tube to incubate. After 2 minutes, open the incubator, and move the tube from the incubator back into the tube rack."\n\nPlease do not begin working until I say "Start working." Before that command is given, simply output the message "Waiting for next input." Understood?\n',
            'answer': 'Understood. Waiting for next input.'},
        {
            'ask': 'Necessary and sufficient robot actions are defined as follows:\n\n"ROBOT ACTION LIST WITH PARAMETERS AND DETAILED TARGETING"\n\n- grasp_object(hand, object): Use the specified hand (left/right) to grab a specific object. For example, grasp_object(right, ball) means the robot\'s right hand grasps the ball.\n\n- release_object(hand, object): Use the specified hand (left/right) to release a specific object currently grasped by the hand. For example, release_object(left, book) means the robot\'s left hand releases the book.\n\n- move_object(hand, object, target_with_position): Move a specific object grabbed by the specified hand (left/right) from one position to a target position, which includes precise location and orientation details. For example, move_object(right, cup, "on the center of the table") means the robot\'s right hand moves the cup to the center of the table, provided the cup is not constrained by the environment.\n\n- detach_from_plane(hand, object, plane_with_orientation): Move a grabbed object from a state where it is constrained by a plane to a state where it is not, using the specified hand (left/right). For example, detach_from_plane(left, cup, "from the edge of the table") means the robot\'s left hand detaches the cup from the edge of the table.\n\n- attach_to_plane(hand, object, plane_with_orientation): Attach a grabbed object to a plane using the specified hand (left/right). This is the opposite operation of detach_from_plane(). For example, attach_to_plane(right, plate, "on the corner of the desk") means the robot\'s right hand places the plate down on the corner of the desk.\n\n- open_by_rotate(hand, object): Open something by rotating a grabbed object that is rotationally constrained by its environment, using the specified hand (left/right). For example, open_by_rotate(left, jar) means the robot\'s left hand opens a jar by rotating its lid.\n\n- adjust_by_rotate(hand, object): Rotate a grabbed object that is rotationally constrained by its environment, using the specified hand (left/right), to adjust its state. For example, adjust_by_rotate(right, knob) means the robot\'s right hand adjusts the state of a knob by rotating it.\n\n- close_by_rotate(hand, object): Close something by rotating a grabbed object in the opposite direction of opening, using the specified hand (left/right). For example, close_by_rotate(left, jar) means the robot\'s left hand closes the jar by rotating its lid in the opposite direction.\n\n- open_by_slide(hand, object): Move a grabbed object that is translationally constrained in two axes from its environment along one unbounded axis, using the specified hand (left/right). For example, open_by_slide(right, drawer) means the robot\'s right hand opens a drawer by sliding it.\n\n- adjust_by_slide(hand, object): Slide a grabbed object that is translationally constrained in two axes from its environment along one unbounded axis, using the specified hand (left/right), to adjust its position. For example, adjust_by_slide(left, door) means the robot\'s left hand adjusts the position of a sliding door.\n\n- close_by_slide(hand, object): Close something by sliding a grabbed object in the opposite direction of opening, using the specified hand (left/right). For example, close_by_slide(right, drawer) means the robot\'s right hand closes a drawer by sliding it in the opposite direction.\n\n- wipe_on_plane(hand, object, plane_with_orientation): Move a grabbed object landing on a plane along two axes on that plane, using the specified hand (left/right). For example, wipe_on_plane(left, sponge, "across the surface of the window") means the robot\'s left hand wipes the window with a sponge.\n\n- press_object(hand, object): Use the specified hand\'s (left/right) thumb to press down on a specific object. This action is used to apply downward pressure, for example, press_object(right, button) means the robot\'s right hand presses down on a button.\n\n- release_thumb_pressure(hand, object): Utilize the specified hand\'s (left/right) thumb to release pressure from a specific object and lift the thumb away. This action concludes the press sequence by gently easing off the pressure applied by the thumb and returning it to its initial position, ensuring no additional force is exerted on the object.\n\n- stuck_into_object(hand, object, target_with_orientation): Use the specified hand (left/right) to insert an object into a target, connecting them together. For example, stuck_into_object(left, key, "into the keyhole of the lock") means the robot\'s left hand inserts the key into the lock, aiming to engage or secure them together.\n\n- open_by_unlatch(hand, object): Utilize the specified hand\'s (left/right) thumb to unlatch and thereby open a box. This action involves carefully manipulating the thumb to apply the precise amount of force and movement needed to disengage the latch of the box without damaging the mechanism or the box itself.\n\n- move_into_something(hand, object, target_with_orientation): Use the specified hand (left/right) to insert an object, specifically a pipette, into an object. This action can only be executed when the something is in an opened state, ensuring that the insertion process does not meet any physical resistance from a closed bottle. The precise movement involves guiding the tube with controlled motion to avoid any damage to the bottle or the tube itself. For example, move_into_bottle(left, tube, "into the neck of the opened water bottle") means the robot\'s left hand inserts the tube into an opened water bottle.\n\n- move_out_something(hand, object, target_with_orientation): Utilize the specified hand (left/right) to carefully remove an object, specifically a tube, from a bottle referred to by `bottle_name`. This action requires precision and control to ensure the tube is extracted without causing damage to the tube or the bottle. The operation must be performed with an awareness of the bottle\'s interior and exterior conditions to prevent any spillage or harm during the removal process.\n\n- detach_from_something(hand, object, target_with_orientation): Use the specified hand (left/right) to detach an object from a target, moving them apart. For example, detach_from_something(left, key, "from the lock") means the robot\'s left hand detaches the key from the lock, aiming to move them apart.\n\n- wait(time): Stop doing everything and wait for a specific time, then continue the forward actions.\n\n- tap_flick_object(hand, object): Use the specified hand (left/right) to gently tap or flick an object, facilitating a light mixing or stirring action without applying excessive force. This action is ideal for handling delicate materials or solutions that require careful agitation to mix. For example, tap_flick_object(right, tube) means the robot\'s right hand gently taps or flicks a tube to mix the contents inside lightly.\n\n- rock_plate(hand, plate): Use both hands to hold the edges of a plate and gently rock it back and forth. This action ensures a smooth mixing of the plate\'s contents without spilling or harsh agitation. It\'s particularly useful for mixing solutions or cultures on a plate by providing a gentle rocking motion. For example, rock_plate(both, petri_dish) indicates the robot uses both hands to rock a petri dish back and forth to mix the contents gently.\n\n- pour_object(hand, from_object, to_object): Use the specified hand (left/right) to carefully pour contents from one object to another. This action requires precise control to avoid spills and ensure the smooth transfer of liquid or small particles from one container to another. For example, pour_object(left, beaker, flask) means the robot\'s left hand pours the contents from a beaker into a flask.\n\n- rub_objects(hand1, hand2, object1, object2): Use both hands (specifying left or right for each hand) to hold two objects and rub them against each other. This action is often used for cleaning or mixing purposes, such as rubbing two microscope slides together to spread a sample evenly. For example, rub_objects(left, right, slide1, slide2) means the robot uses its left hand to hold slide1 and its right hand to hold slide2, rubbing them together to achieve the desired effect.\n\nIt\'s essential that all actions involving placement or movement relative to another object or surface include specific orientation and positioning details, such as "above the tube rack" instead of just "tube rack," to ensure clarity and precision in execution.\n\n---\n\nPlease do not start working yet. Wait for the command "Start working." Before that, simply output the message "Waiting for next input." Understood?\n',
            'answer': 'Understood. Waiting for next input.'},
        {
            'ask': 'Information about environments and objects are given as python dictionary. Example:\n"""\n{"environment":{"assets":["<table>", "<shelf_bottom>", "<shelf_top>", "<trash_bin>", "<floor>"],\n"asset_states": {"<shelf_bottom>": "on_something(<table>)",\n"<trash_bin>": "on_something(<floor>)"},\n"objects": ["<spam>", "<juice>"],\n"object_states": {"<spam>": "on_something(<table>)",\n"<juice>": "on_something(<shelf_bottom>)"}}}\n"""\nAsset states and object states are represented using those state sets:\n"""\n"STATE LIST"\n\n- on_something(<something>): Object is located on <something>\n- inside_something(<something>): Object is located inside <something>\n- stuck_in_something(<something>): Object is stuck in <something> and can be obtained by action stuck_into_object()\n- inside_hand(): Object is being grasped by a robot hand\n- closed(): Object can be opened\n- open(): Object can be closed or kept opened\n- rotatable(): Object can be opened, closed or adjusted by rotating.\n- slidable(): Object can be opened, closed or adjusted by sliding.\n- pressable(): Object can be pressed and released for adjusting.\n- unlatchable(): Object can be opened by unlatching.\n"""\n<something> should be one of the assets or objects in the environment.\n---\n\nThe texts above are part of the overall instruction. Do not start working yet:\n',
            'answer': 'Understood. I will wait for further instructions before starting to work.'},
        {
            'ask': 'You divide the actions given in the text into detailed robot actions and put them together as a python dictionary.\nThe dictionary has five keys.\n"""\n\n- dictionary["task_cohesion"]: A dictionary containing information about the robot\'s actions that have been split up.\n- dictionary["environment_before"]: The state of the environment before the manipulation.\n- dictionary["environment_after"]: The state of the environment after the manipulation.\n- dictionary["instruction_summary"]: contains a brief summary of the given sentence.\n- dictionary["question"]: If you cannot understand the given sentence, you can ask the user to rephrase the sentence. Leave this key empty if you can understand the given sentence.\n"""\nTwo keys exist in dictionary["task_cohesion"].It\'s very important to remember it.\n"""\n- dictionary["task_cohesion"]["task_sequence"]: Contains a list of robot actions. Only the behaviors defined in the "ROBOT ACTION LIST" will be used. Never add additional comments to this, such as "#".\n- dictionary["task_cohesion"]["step_instructions"]: contains a list of instructions corresponding to dictionary["task_cohesion"]["task_sequence"].\n"""\n\n---\n\nThe texts above are part of the overall instruction. Please follow the output format strictly and never add additional comments. Do not start working yet:\n',
            'answer': 'Understood. Waiting for next input.'},
        {
            'ask': 'I will give you some examples of the input and the output you will generate.\n\nExample 1:\n"""\n- Input:\n{"environment": {"assets": ["<table>", "<tube_rack>", "<tip_box>"],\n                            "asset_states": {"<tip_box>": "on_something(<table>), open()",\n                                             "<tube_rack>": "on_something(<table>)"},\n                            "objects": ["<pipette>", "<tube>", "<pipette_tips>", "<reagent_bottle>"],\n                            "object_states": {"<pipette>": "on_something(<table>, rotatable(), pressable()",\n                                              "<tube>": "in_something(<tube_rack>)",\n                                              "<pipette_tips>": "stuck_in_something(<tip_box>)",\n                                              "<reagent_bottle>": "on_something(<table>), unlatchable()"}},\n "instruction": "add 10µL reagents into tube using pipette"}\n\n- Output:\n```\n{\n    "task_cohesion": {\n        "task_sequence": [\n            "grasp_object(left, pipette)",\n            "adjust_by_rotate(right, pipette)",\n            "release_object(left, pipette)",\n            "grasp_object(left, reagent_bottle)",\n            "open_by_rotate(right, reagent_bottle)",\n            "grasp_object(left, tip_box)",\n            "open_by_unlatch(right, tip_box)",\n            "grasp_object(right, pipette)",\n            "move_object(right, pipette, above tip_box)",\n            "stuck_into_object(right, pipette, pipette_tips)",\n            "move_object(right, pipette, above reagent_bottle)",\n            "move_into_something(right, pipette, reagent_bottle)",\n            "press_object(right, pipette)",\n            "release_thumb_pressure(right, pipette)",\n            "move_out_something(right, pipette, reagent_bottle)"\n            "move_object(right, pipette, above tube)",\n            "move_into_something(right, pipette, tube)",\n            "press_object(right, pipette)",\n            "release_thumb_pressure(right, pipette)",\n            "move_out_something(right, pipette, tube)",\n            "attach_to_plane(right, pipette, on table)",\n            "release_object(right, pipette)"\n        ],\n        "step_instructions": [\n            "grasp the pipette with the left hand",\n            "set the pipette volume to 10µL by rotating its adjustment knob with the right hand",\n            "release the pipette",\n            "grasp the reagent bottle with the left hand",\n            "open the reagent bottle by rotating its lid with the right hand",\n            "grasp the tip box with the left hand",\n            "open the tip box by unlatch its lid with the right hand",\n            "grasp the pipette with the right hand",\n            "move the pipette to the tip box",\n            "stuck the pipette into the tip in the tip box with right hand",\n            "move the pipette with the attached tip to the reagent bottle with right hand",\n            "move the pipette with the attached tip into the reagent bottle",\n            "press the button of the pipette with right hand thumb",\n            "release the button of the pipette with right hand thumb",\n            "move the pipette with the attached tip out of the reagent bottle",\n            "move the pipette with the attached tip to the tube with right hand",\n            "move the pipette into the tube with right hand",\n            "press the button of the pipette with right hand thumb",\n            "release the button of the pipette with right hand thumb",\n            "move the pipette out of the tube ",\n            "attach the pipette to the table with right hand",\n            "release the pipette with right hand"\n        ]\n    },\n    "environment_before": {\n        "assets": ["<table>", "<tube_rack>", "<tip_box>"],\n        "asset_states": {\n            "<tip_box>": "on_something(<table>), open()", "<tube_rack>": "on_something(<table>)"},\n        "objects": ["<pipette>", "<tube>", "<pipette_tips>", "<reagent_bottle>"],\n        "object_states": {"<pipette>": "on_something(<table>, rotatable(), pressable()",\n                          "<tube>": "in_something(<tube_rack>)", "<pipette_tips>": "stuck_in_something(<tip_box>)",\n                          "<reagent_bottle>": "on_something(<table>), unlatchable()"}},\n    "environment_after": {\n        "assets": ["<table>", "<tube_rack>", "<tip_box>"],\n        "asset_states": {\n            "<tip_box>": "on_something(<table>), open()",\n            "<tube_rack>": "on_something(<table>)"\n        },\n        "objects": ["<pipette>", "<tube>", "<pipette_tips>", "<reagent_bottle>"],\n        "object_states": {\n            "<pipette>": "on_something(<table>)",\n            "<tube>": "inside_something(<tube_rack>), open()",\n            "<pipette_tips>": "attached_to(<pipette>)",\n            "<reagent_bottle>": "on_something(<table>), open()"\n        }\n    },\n    "instruction_summary": "Set pipette volume to 10µL and pipette reagents into tube",\n    "question": ""\n}\n```\n"""\nExample 2:\n"""\n- Input:\n{"environment": {"assets": ["<table>", "<trash_bin>", "<floor>"],\n                            "asset_states": {"<trash_bin>": "on_something(<floor>)"},\n                            "objects": ["<pipette>", "<pipette tip>"],\n                            "object_states": {"<pipette>": "on_something(<table>)",\n                                              "<pipette tip>": "stuck_in_something(<pipette>)"}},\n "instruction": "discard the used tip on the pipette to the trash bin"}\n\n- Output:\n```\n{\n    "task_cohesion": {\n        "task_sequence": [\n            "grasp_object(right, pipette)",\n            "grasp_object(left, pipette tip)",\n            "detach_from_something(left, pipette tip, pipette)"\n            "release_object(left, pipette tip)"\n        ],\n        "step_instructions": [\n            "Grasp the pipette with the right hand.",\n            "Grasp the pipette tip with the left hand.",\n            "Detach the pipette tip from the pipette with the left hand"\n            "Release the pipette tip into the trash bin."\n        ]\n    },\n    "environment_before": {\n        "assets": ["<table>", "<trash_bin>", "<floor>"],\n        "asset_states": {"<trash_bin>": "on_something(<floor>)"},\n        "objects": ["<pipette>", "<pipette tip>"],\n        "object_states": {\n            "<pipette>": "on_something(<table>)",\n            "<pipette tip>": "stuck_in_something(<pipette>)"\n        }\n    },\n    "environment_after": {\n        "assets": ["<table>", "<trash_bin>", "<floor>"],\n        "asset_states": {"<trash_bin>": "on_something(<floor>)"},\n        "objects": ["<pipette>", "<pipette tip>"],\n        "object_states": {\n            "<pipette>": "on_something(<table>)",\n            "<pipette tip>": "inside_something(<trash_bin>)"\n        }\n    },\n    "instruction_summary": "Discard the used pipette tip into the trash bin.",\n    "question": ""\n}\n```\n"""\nExample 3:\n"""\n- Input:\n{"environment": {"assets": ["<table>", "<incubator>", "<floor>", "<tube_rack>"],\n                            "asset_states": {"<incubator>": "on_something(<floor>), unlatchable()",\n                                             "<tube_rack>": "on_something(<table>)"},\n                            "objects": ["<tube>"],\n                            "object_states": {"<tube>": "stuck_in_something(<tube_rack>)"}},\n "instruction": "incubate the tube for 2 minutes"}\n\n- Output:\n```\n{\n    "task_cohesion": {\n        "task_sequence": [\n            "open_by_unlatch(right, incubator)",\n            "grasp_object(right, tube)",\n            "move_object(right, tube, above incubator)",\n            "attach_to_plane(right, tube, incubator)",\n            "release_object(right, tube)",\n            "close_by_slide(right, incubator)",\n            "wait(2 minutes)",\n            "open_by_unlatch(right, incubator)",\n            "grasp_object(right, tube)",\n            "move_object(right, tube, above tube_rack)",\n            "attach_to_plane(right, tube, tube_rack)",\n            "release_object(right, tube)",\n            "close_by_slide(right, incubator)"\n        ],\n        "step_instructions": [\n            "Open the incubator by unlatching it with the right hand.",\n            "Grasp the tube with the right hand from the tube rack.",\n            "Move the tube towards the incubator.",\n            "Place the tube inside the incubator, ensuring it is securely positioned.",\n            "Release the tube inside the incubator.",\n            "Close the incubator by sliding its door shut with the right hand.",\n            "wait for 2 minutes.",\n            "Open the incubator by unlatching it with the right hand.",\n            "Grasp the tube with the right hand in the incubator",\n            "Move the tube towards the tube rack.",\n            "Place the tube on the tube rack, ensuring it is securely positioned.",\n            "Release the tube on the tube rack.",\n            "Close the incubator by sliding its door shut with the right hand."\n\n        ]\n    },\n    "environment_before": {\n        "assets": ["<table>", "<incubator>", "<floor>", "<tube_rack>"],\n        "asset_states": {\n            "<incubator>": "on_something(<floor>), closed()",\n            "<tube_rack>": "on_something(<table>)"\n        },\n        "objects": ["<tube>"],\n        "object_states": {\n            "<tube>": "stuck_in_something(<tube_rack>)"\n        }\n    },\n    "environment_after": {\n        "assets": ["<table>", "<incubator>", "<floor>", "<tube_rack>"],\n        "asset_states": {\n            "<trash_bin>": "on_something(<floor>)",\n            "<incubator>": "on_something(<floor>), open()",\n            "<tube_rack>": "on_something(<table>)"\n        },\n        "objects": ["<tube>"],\n        "object_states": {\n            "<tube>": "inside_something(<tube_rack>)"\n        }\n    },\n    "instruction_summary": "Incubate the tube for 2 minutes by first opening the incubator, moving the tube inside, and then closing the incubator. Take it out back to tube rack after incubation",\n    "question": ""\n}\n```\nFrom these examples, learn that some robotic actions have dependencies with the actions before and after them.\nThe texts above are part of the overall instruction. Do not start working yet:\n',
            'answer': 'Understood. I will wait for further instructions before starting to work.'}
    ]
}


# jsons = json.loads(jsonTest, strict=False)

# print(jsons)
# print(jsons.keys())
# print(jsons["task_cohesion"]["environment_after"])

